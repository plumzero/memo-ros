// Generated by gencpp from file roslog/detail.msg
// DO NOT EDIT!


#ifndef ROSLOG_MESSAGE_DETAIL_H
#define ROSLOG_MESSAGE_DETAIL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace roslog
{
template <class ContainerAllocator>
struct detail_
{
  typedef detail_<ContainerAllocator> Type;

  detail_()
    : header()
    , loglevel(0)
    , logtype()
    , filename()
    , lineno(0)
    , timestamp(0)
    , clocktime()
    , detail()  {
    }
  detail_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , loglevel(0)
    , logtype(_alloc)
    , filename(_alloc)
    , lineno(0)
    , timestamp(0)
    , clocktime(_alloc)
    , detail(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _loglevel_type;
  _loglevel_type loglevel;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _logtype_type;
  _logtype_type logtype;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _filename_type;
  _filename_type filename;

   typedef uint32_t _lineno_type;
  _lineno_type lineno;

   typedef uint64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _clocktime_type;
  _clocktime_type clocktime;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _detail_type;
  _detail_type detail;



  enum {
    FATAL = 0u,
    ERROR = 1u,
    WARN = 2u,
    INFO = 3u,
    DEBUG = 4u,
  };


  typedef boost::shared_ptr< ::roslog::detail_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roslog::detail_<ContainerAllocator> const> ConstPtr;

}; // struct detail_

typedef ::roslog::detail_<std::allocator<void> > detail;

typedef boost::shared_ptr< ::roslog::detail > detailPtr;
typedef boost::shared_ptr< ::roslog::detail const> detailConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roslog::detail_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roslog::detail_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roslog

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'roslog': ['/home/libei/Public/memo-ros/tests/case_05/msg/roslog'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roslog::detail_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roslog::detail_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roslog::detail_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roslog::detail_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roslog::detail_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roslog::detail_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roslog::detail_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bbb08581ec74cbc8008b381c3852fe65";
  }

  static const char* value(const ::roslog::detail_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbbb08581ec74cbc8ULL;
  static const uint64_t static_value2 = 0x008b381c3852fe65ULL;
};

template<class ContainerAllocator>
struct DataType< ::roslog::detail_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roslog/detail";
  }

  static const char* value(const ::roslog::detail_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roslog::detail_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# example                         \n\
Header  header\n\
uint8   loglevel\n\
string  logtype\n\
string  filename\n\
uint32  lineno\n\
uint64  timestamp\n\
string  clocktime\n\
string  detail\n\
\n\
#log level enum\n\
uint8 FATAL = 0\n\
uint8 ERROR = 1\n\
uint8 WARN = 2\n\
uint8 INFO = 3\n\
uint8 DEBUG = 4\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::roslog::detail_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roslog::detail_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.loglevel);
      stream.next(m.logtype);
      stream.next(m.filename);
      stream.next(m.lineno);
      stream.next(m.timestamp);
      stream.next(m.clocktime);
      stream.next(m.detail);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct detail_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roslog::detail_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roslog::detail_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "loglevel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.loglevel);
    s << indent << "logtype: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.logtype);
    s << indent << "filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.filename);
    s << indent << "lineno: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.lineno);
    s << indent << "timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "clocktime: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.clocktime);
    s << indent << "detail: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.detail);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSLOG_MESSAGE_DETAIL_H
